/*
 * A set of blocks which are adjacent to eachother and contain the same fluid.
 * Intented to be run in series in a pool thread.
 * Maintains two priority queues:
 * 	m_blocksByZandTotalFluidHeight is all blocks which have fluid. It is sorted by high to low. This is the source of flow.
 * 	adjacentAndUnfullBlocks is all blocks which have some fluid but aren't full, as well as blocks with no fluid that are non-solid and adjacent. It is sorted by low to high. This is the destination of flow.
 * The flow for the step is computed in readStep and applied in writeStep so that readStep can run concurrently with other read only tasks.
 */

#pragma once

#include <vector>
#include <unordered_set>

#include "fluidType.h"
#include "drainQueue.h"
#include "fillQueue.h"

class Block;

struct FluidGroupSplitData
{
	std::unordered_set<Block*> members;
	std::unordered_set<Block*> changeAdjacent;
}

class FluidGroup
{
public:
	// Currently at rest?
	bool m_stable;
	bool m_destroy;a
	bool m_merged;
	bool m_disolved;
	const FluidType* m_fluidType;
	int32_t m_excessVolume;
	FillQueue m_fillQueue;
	DrainQueue m_drainQueue;
	std::unordered_set<FluidGroup*> m_disolvedInThisGroup;

	// For spitting into multiple fluidGroups.
	std::vector<FluidGroupSplitData> m_futureGroups;
	// For notifing groups with different fluids of unfull status. Groups with the same fluid are merged instead.
	std::unordered_map<FluidGroup*, std::unordered_set<Block*>> m_futureNotifyPotentialUnfullAdjacent;

	std::unordered_set<Block*> m_potentiallyNoLongerAdjacentFromSyncronusStep;
	std::unordered_set<Block*> m_potentiallyAddToFillQueueFromSyncronusStep;
	std::unordered_set<Block*> m_potentiallySplitFromSyncronusStep;

	std::unordered_set<Block*> m_futureNewEmptyAdjacents;

	std::unordered_set<Block*> m_futureAddToDrainQueue;
	std::unordered_set<Block*> m_futureRemoveFromDrainQueue;
	std::unordered_set<Block*> m_futureAddToFillQueue;
	std::unordered_set<Block*> m_futureRemoveFromFillQueue;

	FluidGroup(const FluidType* ft, std::unordered_set<Block*> blocks);
	void addFluid(uint32_t fluidVolume);
	void removeFluid(uint32_t fluidVolume);
	void addBlock(Block* block, bool checkMerge = true);
	void removeBlock(Block* block);
	void removeBlocks(std::unordered_set<Block*>& blocks);
	void merge(FluidGroup* fluidGroup);
	void split(std::unordered_set<Block*>& blocks, std::vector<FluidGroup*>& newlySplit);
	void readStep();
	void writeStep();
	void mergeStep();
	void splitStep(std::vector<FluidGroup*>& newlySplit);
	friend class baseArea;
};
