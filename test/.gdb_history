whe
p x
p y
p z
p location->toS()
p visionRange
r
whe
p x
up
p x
p y
p z
r
whe
up
p xCumulative 
p yCumulative 
p zCumulative 
p denominator 
p diffs
r
r
r
whe
r
up
down
p m_x
p this
p this->toS()
r
p block->m_x
p block->m_y
p block->m_z
p m_z
up
p a
p a.routeNode
p a.routeNode.block
p a.routeNode.block->m_z
whe
up
p proposedRouteStep 
b routeRequest.cpp:23
n
r
whe
b routeRequest.cpp:25
r
p block
p block->toS()
p proposedRouteStep 
n
p adjacent
p adjacentMoveCosts 
r
whe
up 6
7
r
whe
up 6
up
up 7
down 3
whe
whe
r
whe
b routeRequest.cpp:56
r
n
r
p open
p adjacentMoveCosts 
p closed
b routeRequest.cpp:49
r
c
b routeRequest.cpp:26
r
n
p block
p end
p block == end
whe
p proposedRouteStep 
p proposedRouteStep.routeNode
p proposedRouteStep.routeNode.block
p proposedRouteStep.routeNode.block->toS()
p end->toS()
n
r
n
r
p block
n
p block
p block->toS()
r
n
p open
p open.top()
p open.top().routeNode
p open.top().routeNode->block
p open.top().routeNode->block->toS()
n
p block
p block->toS()
r
n
p block->m_z
p block->m_x
p block->m_y
p start->toS()
proposedRouteStep
p proposedRouteStep 
p open
p open.front
p open.back
p open.top
p open.top()
p open
p open[0]
p open.at(0)
r
whe
r
whe
p actor->m_route
up
p actor->m_route
p routeRequest.m_result
b routeRequest.cpp:27
r
n
p adjacent->toS()
p open
p block
p block->toS()
n
p open
n
p open
c
n
p open
r
p open
c
p open
r
b routeRequest.cpp:54
c
p moveCost
p proposedRouteStep 
c
p proposedRouteStep 
p open
r
c
p proposedRouteStep 
c
p proposedRouteStep 
p open
r
n
p proposedRouteStep 
c
p proposedRouteStep 
c
p proposedRouteStep 
r
r
whe
p routeRequest.m_result 
p routeRequest.m_result[0]->toS()
p routeRequest.m_result[1]->toS()
p routeRequest.m_result[2]->toS()
p routeRequest.m_result[3]->toS()
p routeRequest.m_result[4]->toS()
p routeRequest.m_result[5]->toS()
p routeRequest.m_result[6]->toS()
p routeRequest.m_result[7]->toS()
p routeRequest.m_result[8]->toS()
p routeRequest.m_result[9]->toS()
r
p routeRequest.m_result[9]->toS()
p routeRequest.m_result
r
p routeRequest.m_result
p routeRequest.m_result[0]->toS()
p routeRequest.m_result[8]->toS()
p routeRequest.m_result[4]->toS()
p routeRequest.m_result[5]->toS()
r
p actor.m_location->toS()
p actor.m_route
p actor.m_route.get()
p *actor.m_route
p *actor.m_route[0]
p (*actor.m_route)[0]
p (*actor.m_route)[0]->toS()
r
p actor.m_location->toS()
b hasScheduledEvents.cpp:5
r
n
p block->toS()
p block->anyoneCanEnterEver ()
p block->canEnterEver(m_actor)
n
p block->shapeCanEnterCurrently(m_actor->m_shape)
s
n
p shape
p shape
p shape->positions
p block->m_totalDynamicVolume 
whe
p m_totalDynamicVolume 
s
n
n
p block->toS()
p block->m_totalDynamicVolume 
p block->m_totalDynamicVolume + v
p block->m_totalDynamicVolume + v > MAX_BLOCK_VOLUME
p block->m_totalDynamicVolume + v > 100
r
p actor.m_location->toS()
p block1.toS){
p block1.toS()
r
whe
r
r
c
p actor->m_location->toS()
r
p area.m_routeRequestQueue 
p block1.toS()
b testRoute.h:127
r
d
b testRoute.h:123
r
p area.m_routeRequestQueue 
b testRoute.h:114
r
p area.m_routeRequestQueue 
r
p block3->toS()
p block3.toS()
p actor->m_location->toS()
