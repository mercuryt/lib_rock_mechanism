p adjacent->toS()
p adjacent->m_z
r
n
p adjacent
p adjacent.m_z
p adjacent.m_x
p adjacent.m_y
p m_adjacents
p block->m_adjacents
p block->m_adjacents[3]
p block->m_adjacents[3].m_z
p block->m_adjacents[4].m_z
p block->m_adjacents[5].m_z
p block->m_adjacents[5].m_x
p block->m_adjacents[4].m_x
p block->m_adjacents[3].m_x
p block->m_adjacents[3].m_xn
n
n
p nextBlocks[0]->toS()
p adjacent
p adjacent == nullptr
p adjacent == 0
n
p adjacent
n
p nextBlocks
p closed
p toS(closed)
p &adjacent
p *adjacent
n
p *adjacent
b visionRequest.cpp:55
r
p block->toS){
p block->toS()
b visionRequest.cpp:55
r
n
p block->toS()
n
n
p adjacent->toS()
p adjacent
r
n
p adjacent
n
p adjacent
p adjacent->canSeeThrough()
n
p nextBlocks
p currentBlocks
n
p closed
p range
c
p range
c
p range
c
p range
c
r
c
p range
n
c
p range
n
c
p closed
p nextBlocks
p closed
p currentBlocks
r
p currentBlocks
p currentBlocks[0]->toS()
c
p nextBlocks
p currentBlocks
p currentBlocks[0]->toS()
p currentBlocks[1]->toS()
p currentBlocks[2]->toS()
p toS(closed)
c
p toS(closed)
p currentBlocks
p currentBlocks[0]->toS()
p currentBlocks[1]->toS()
p currentBlocks[2]->toS()
p currentBlocks[3]->toS()
p currentBlocks[4]->toS()
p currentBlocks[5]->toS()
p currentBlocks[6]->toS()
p currentBlocks[7]->toS()
p currentBlocks[8]->toS()
p VisionRequest::getVisibleBlocks(area.m_blocks[0][0][0],5)
p VisionRequest::getVisibleBlocks(block,5)
c
d
p VisionRequest::getVisibleBlocks(block,5)
r
y
b block.cpp:307
p VisionRequest::getVisibleBlocks(this,5)
whe
up
p VisionRequest::getVisibleBlocks(this,5)
p VisionRequest::getVisibleBlocks(block,5)
whe
d
b\ block.cpp:307
b block.cpp:307
r
p VisionRequest::getVisibleBlocks(this,5)
p VisionRequest::getVisibleBlocks(static_cast<Block*>(this),5)
n
r
whe
r
whe
b visionRequest.cpp:13.8
b visionRequest.cpp:138
r
p xDiffNormalized 
p yDiffNormalized 
p zDiffNormalized 
c
p to->toS()
p from->toS()
p xDiff
p yDiff
p zDiff
b visionRequest.cpp:138
r
p xDiff
p x]yDiff
p yDiff
p zDiff
b visionRequest.cpp:138
r
p zDiff
p yDiff
p to->m
p to->m_y
p to->m_z
p to->m_x
p from->m_y
p to->m_y - from->m_y
p to->m_y - (int32_t)from->m_y
p (int32_t)to->m_y - (int32_t)from->m_y
p (int32_t)to->m_y - from->m_y
p (int32_t)to->m_y - (int32_t)from->m_y
p (int32_t)to->m_y - (int32_t)from->m_y

yDiff = (int32_t)to->m_y - (int32_t)from->m_y
p yDiff = (int32_t)to->m_y - (int32_t)from->m_y
p Diff
p yDiff
r
whe
r
whe
b visionRequest.cpp:138
r
p yDiff
p xDiff
p zDiff
p xDiffNormalized 
p denominator 
b visionRequest.cpp:138
r
p xDiffNormalized 
p yDiffNormalized 
p zDiffNormalized 
n
p xCumulative
p yCumulative
p zCumulative
n
p yCumulative
n
p b
c
c
c
c
c
c
c
c
c
c
c
c
c
c
d
c
whe
p from->toS()
up
p from->toS()
p to->toS()
p b
p xCumulative 
p yCumulative
p zCumulative
p to->offset(0,1,0)
r
whe
p b
p xCumulative 
up
p b
p from->toS()
p to->toS()
p xDiffNormalized 
p yDiffNormalized 
p zDiffNormalized 
y yDiff
p yDiff
p absLargest
p denominator 
p yDiff
-1 / -1
p -1 / -1
r
b visionRequest.cpp:138
r
n
p from->toS()
p to->toS()
p yDiff
p yDiffNormalized 
r
whe
p yDiff
up
p to->toS()
p from->toS()
p xDiff
p yDiff
p yDiffNormalized 
c
r
whe
up
p to
p to->toS()
p xCumulative 
p yCumulative 
p zCumulative 
