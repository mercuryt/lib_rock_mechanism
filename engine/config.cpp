#include "config.h"
#include "types.h"
void Config::load()
{
	std::ifstream f("data/config.json");
	Json data = Json::parse(f);
	data["stepsPerSecond"].get_to(stepsPerSecond);
	data["secondsPerMinute"].get_to(secondsPerMinute);
	data["minutesPerHour"].get_to(minutesPerHour);
	data["hoursPerDay"].get_to(hoursPerDay);
	data["daysPerYear"].get_to(daysPerYear);
	stepsPerMinute = Step::create(stepsPerSecond.get() * secondsPerMinute);
	stepsPerHour = Step::create(stepsPerMinute.get() * minutesPerHour);
	stepsPerDay = Step::create(stepsPerHour.get() * hoursPerDay);
	stepsPerYear = Step::create(stepsPerDay.get() * daysPerYear);
	//data["medicalPriority"].get_to(medicalPriority);
	//data["medicalProjectDelayMinutes"].get_to(medicalProjectDelaySteps);
	addToStockPileDelaySteps = Step::create(data["addToStockPileDelaySeconds"].get<float>() * stepsPerSecond.get());
	data["adjacentAllyCombatScoreBonusModifier"].get_to(adjacentAllyCombatScoreBonusModifier);
	data["attackCoolDownDurationBaseDextarity"].get_to(attackCoolDownDurationBaseDextarity);
	attackCoolDownDurationBaseSteps = Step::create(data["attackCoolDownDurationBaseSeconds"].get<float>() * stepsPerSecond.get());
	data["attackSkillCombatModifier"].get_to(attackSkillCombatModifier);
	data["averageItemQuality"].get_to(averageItemQuality);
	data["averageLandHeightBlocks"].get_to(averageLandHeightBlocks);
	data["averageNumberOfRiversPerCandidate"].get_to(averageNumberOfRiversPerCandidate);
	baseHealDelaySteps = Step::create(data["baseHealDelaySeconds"].get<float>() * stepsPerSecond.get());
	data["baseMoveCost"].get_to(baseMoveCost);
	bleedEventBaseFrequency = Step::create(data["bleedEventBaseFrequencySeconds"].get<float>() * stepsPerSecond.get());
	bleedPassOutDuration = Step::create(data["bleedPassOutDurationSeconds"].get<float>() * stepsPerSecond.get());
	data["bleedToDeathRatio"].get_to(bleedToDeathRatio);
	data["bleedToUnconciousessRatio"].get_to(bleedToUnconciousessRatio);
	data["blocksPerMeter"].get_to(blocksPerMeter);
	data["bludgeonBleedVoumeRateModifier"].get_to(bludgeonBleedVoumeRateModifier);
	data["bludgeonPercentPermanantImparmentModifier"].get_to(bludgeonPercentPermanantImparmentModifier);
	data["bludgeonPercentTemporaryImparmentModifier"].get_to(bludgeonPercentTemporaryImparmentModifier);
	data["bludgeonStepsTillHealedModifier"].get_to(bludgeonStepsTillHealedModifier);
	data["bodyHardnessModifier"].get_to(bodyHardnessModifier);
	data["chanceToWaitInsteadOfWander"].get_to(chanceToWaitInsteadOfWander);
	data["constructObjectivePriority"].get_to(constructObjectivePriority);
	data["constructSkillModifier"].get_to(constructSkillModifier);
	data["constructStrengthModifier"].get_to(constructStrengthModifier);
	data["craftObjectivePriority"].get_to(craftObjectivePriority);
	data["cutBleedVoumeRateModifier"].get_to(cutBleedVoumeRateModifier);
	data["cutPercentPermanantImparmentModifier"].get_to(cutPercentPermanantImparmentModifier);
	data["cutPercentTemporaryImparmentModifier"].get_to(cutPercentTemporaryImparmentModifier);
	data["cutStepsTillHealedModifier"].get_to(cutStepsTillHealedModifier);
	data["deepAmbiantTemperature"].get_to(deepAmbiantTemperature);
	digMaxSteps = Step::create(data["digMaxMinutes"].get<float>() * stepsPerMinute.get());
	data["digObjectivePriority"].get_to(digObjectivePriority);
	data["digSkillModifier"].get_to(digSkillModifier);
	data["digStrengthModifier"].get_to(digStrengthModifier);
	data["drinkPriority"].get_to(drinkPriority);
	data["eatPriority"].get_to(eatPriority);
	data["equipPriority"].get_to(equipPriority);
	exterminateCheckFrequency = Step::create(data["exterminateCheckFrequencySeconds"].get<float>() * stepsPerSecond.get());
	data["exterminatePriority"].get_to(exterminatePriority);
	data["fatPierceForceCost"].get_to(fatPierceForceCost);
	data["fireRampDownPhaseDurationFraction"].get_to(fireRampDownPhaseDurationFraction);
	data["flankingModifier"].get_to(flankingModifier);
	data["fluidGroupsPerThread"].get_to(fluidGroupsPerThread);
	data["forceAbsorbedPiercedModifier"].get_to(forceAbsorbedPiercedModifier);
	data["forceAbsorbedUnpiercedModifier"].get_to(forceAbsorbedUnpiercedModifier);
	data["fractionAttackCoolDownReductionPerPointOfDextarity"].get_to(fractionAttackCoolDownReductionPerPointOfDextarity);
	data["getIntoAttackPositionMaxRange"].get_to(getIntoAttackPositionMaxRange);
	data["getToSafeTemperaturePriority"].get_to(getToSafeTemperaturePriority);
	givePlantsFluidDelaySteps = Step::create(data["givePlantsFluidDelaySeconds"].get<float>() * stepsPerSecond.get());
	data["givePlantsFluidPriority"].get_to(givePlantsFluidPriority);
	data["goToPriority"].get_to(goToPriority);
	data["goUpMoveCost"].get_to(goUpMoveCost);
	harvestEventDuration = Step::create(data["harvestEventDurationSeconds"].get<float>() * stepsPerSecond.get());
	data["harvestPriority"].get_to(harvestPriority);
	data["heatDisipatesAtDistanceExponent"].get_to(heatDisipatesAtDistanceExponent);
	data["heatFractionForBurn"].get_to(heatFractionForBurn);
	data["heatFractionForSmoulder"].get_to(heatFractionForSmoulder);
	data["heatRadianceMinimum"].get_to(heatRadianceMinimum);
	data["hitAreaToBodyPartVolumeRatioForFatalStrikeToVitalArea"].get_to(hitAreaToBodyPartVolumeRatioForFatalStrikeToVitalArea);
	data["hitScaleModifier"].get_to(hitScaleModifier);
	data["impassibleItemVolume"].get_to(impassibleItemVolume);
	installItemDuration = Step::create(data["installItemDurationSeconds"].get<float>() * stepsPerSecond.get());
	data["installItemPriority"].get_to(installItemPriority);
	data["itemQualityCombatModifier"].get_to(itemQualityCombatModifier);
	data["itemQualityModifier"].get_to(itemQualityModifier);
	data["itemSkillModifier"].get_to(itemSkillModifier);
	data["itemTypeCombatModifier"].get_to(itemTypeCombatModifier);
	data["itemTypeCombatScoreModifier"].get_to(itemTypeCombatScoreModifier);
	data["itemWearCombatModifier"].get_to(itemWearCombatModifier);
	data["itemWearModifier"].get_to(itemWearModifier);
	data["killPriority"].get_to(killPriority);
	data["lakeDepthModifier"].get_to(lakeDepthModifier);
	data["lakeRadiusModifier"].get_to(lakeRadiusModifier);
	loadDelaySteps = Step::create(data["loadDelaySeconds"].get<float>() * stepsPerSecond.get());
	data["locationBucketSize"].get_to(locationBucketSize);
	data["massCarryMaximimMovementRatio"].get_to(massCarryMaximimMovementRatio);
	data["maxAnimalInsertLocationSearchRetries"].get_to(maxAnimalInsertLocationSearchRetries);
	data["maxBlockVolume"].get_to(maxBlockVolume);
	data["maxBlocksToLookForBetterFood"].get_to(maxBlocksToLookForBetterFood);
	data["maxDistanceToLookForEatingLocation"].get_to(maxDistanceToLookForEatingLocation);
	data["maxDistanceVisionModifier"].get_to(maxDistanceVisionModifier);
	data["maxNumberOfWorkersForConstructionProject"].get_to(maxNumberOfWorkersForConstructionProject);
	data["maxNumberOfWorkersForDigProject"].get_to(maxNumberOfWorkersForDigProject);
	data["maxNumberOfWorkersForWoodCuttingProject"].get_to(maxNumberOfWorkersForWoodCuttingProject);
	data["maxRangeToSearchForCraftingRequirements"].get_to(maxRangeToSearchForCraftingRequirements);
	data["maxRangeToSearchForStockPileItems"].get_to(maxRangeToSearchForStockPileItems);
	data["maxRangeToSearchForStockPiles"].get_to(maxRangeToSearchForStockPiles);
	data["maxRangeToSearchForDigDesignations"].get_to(maxRangeToSearchForDigDesignations);
	data["maxRangeToSearchForConstructionDesignations"].get_to(maxRangeToSearchForConstructionDesignations);
	data["maxRangeToSearchForWoodCuttingDesignations"].get_to(maxRangeToSearchForWoodCuttingDesignations);
	data["maxRangeToSearchForHorticultureDesignations"].get_to(maxRangeToSearchForHorticultureDesignations);
	data["maxRangeToSearchForUniformEquipment"].get_to(maxRangeToSearchForUniformEquipment);
	data["maxSkillLevel"].get_to(maxSkillLevel);
	data["maxStaminaPointsBase"].get_to(maxStaminaPointsBase);
	data["maxWorkersForStockPileProject"].get_to(maxWorkersForStockPileProject);
	data["maxZLevelForDeepAmbiantTemperature"].get_to(maxZLevelForDeepAmbiantTemperature);
	maximumDurationToWaitInsteadOfWander = Step::create(data["maximumDurationToWaitInsteadOfWanderMinutes"].get<float>() * stepsPerMinute.get());
	data["maximumRainIntensityModifier"].get_to(maximumRainIntensityModifier);
	data["maximumDaysBetweenRainPerPercentHumidity"].get_to(maximumStepsBetweenRainPerPercentHumidity);
	data["maximumSecondsRainPerPercentHumidity"].get_to(maximumStepsRainPerPercentHumidity);
	data["metersHeightCarvedByRivers"].get_to(metersHeightCarvedByRivers);
	data["metersPerUnitElevationLociiIntensity"].get_to(metersPerUnitElevationLociiIntensity);
	data["minimumAltitudeForHeadwaterFormation"].get_to(minimumAltitudeForHeadwaterFormation);
	data["minimumAttackCoolDownModifier"].get_to(minimumAttackCoolDownModifier);
	minimumDurationToWaitInsteadOfWander = Step::create(data["minimumDurationToWaitInsteadOfWanderMinutes"].get<float>() * stepsPerMinute.get());
	data["minimumHaulSpeedInital"].get_to(minimumHaulSpeedInital);
	data["minimumOverloadRatio"].get_to(minimumOverloadRatio);
	data["minimumPercentFoliageForGrow"].get_to(minimumPercentFoliageForGrow);
	data["minimumPercentGrowthForWoodCutting"].get_to(minimumPercentGrowthForWoodCutting);
	data["minimumRainIntensityModifier"].get_to(minimumRainIntensityModifier);
	data["minimumDaysBetweenRainPerPercentHumidity"].get_to(minimumStepsBetweenRainPerPercentHumidity);
	data["minimumSizeForOctTreeToSplit"].get_to(minimumSizeForOctTreeToSplit);
	data["minimumSecondsRainPerPercentHumidity"].get_to(minimumStepsRainPerPercentHumidity);
	data["minimumVolumeOfFluidToBreath"].get_to(minimumVolumeOfFluidToBreath);
	data["minimumSizeOfGroupOfMovingBlocksWhichSkipLineOfSightChecksForMakingVisionRequests"].get_to(minimumSizeOfGroupOfMovingBlocksWhichSkipLineOfSightChecksForMakingVisionRequests);
	data["moveTryAttemptsBeforeDetour"].get_to(moveTryAttemptsBeforeDetour);
	data["musclePierceForceCost"].get_to(musclePierceForceCost);
	data["objectivePrioiorityKill"].get_to(objectivePrioiorityKill);
	data["objectivePrioritySleep"].get_to(objectivePrioritySleep);
	data["pathHuristicConstant"].get_to(pathHuristicConstant);
	data["pathRequestsPerThread"].get_to(pathRequestsPerThread);
	assert(pathRequestsPerThread % 2 == 0);
	data["percentHeightCarvedByRivers"].get_to(percentHeightCarvedByRivers);
	data["minimumHungerLevelThresholds"].get_to(minimumHungerLevelThresholds);
	data["percentOfPlantMassWhichIsFoliage"].get_to(percentOfPlantMassWhichIsFoliage);
	data["percentPermanantImparmentMinimum"].get_to(percentPermanantImparmentMinimum);
	data["pierceBleedVoumeRateModifier"].get_to(pierceBleedVoumeRateModifier);
	data["pierceBoneModifier"].get_to(pierceBoneModifier);
	data["pierceFatModifier"].get_to(pierceFatModifier);
	data["pierceModifier"].get_to(pierceModifier);
	data["pierceMuscelModifier"].get_to(pierceMuscelModifier);
	data["piercePercentPermanantImparmentModifier"].get_to(piercePercentPermanantImparmentModifier);
	data["piercePercentTemporaryImparmentModifier"].get_to(piercePercentTemporaryImparmentModifier);
	data["pierceSkinModifier"].get_to(pierceSkinModifier);
	data["pierceStepsTillHealedModifier"].get_to(pierceStepsTillHealedModifier);
	data["pointsOfCombatScorePerUnitOfAgility"].get_to(pointsOfCombatScorePerUnitOfAgility);
	data["pointsOfCombatScorePerUnitOfDextarity"].get_to(pointsOfCombatScorePerUnitOfDextarity);
	data["pointsOfCombatScorePerUnitOfStrength"].get_to(pointsOfCombatScorePerUnitOfStrength);
	data["projectTryToMakeSubprojectRetriesBeforeProjectDelay"].get_to(projectTryToMakeSubprojectRetriesBeforeProjectDelay);
	projectDelayAfterExauhstingSubprojectRetries = Step::create(data["projectDelayAfterExauhstingSubprojectRetriesSeconds"].get<uint32_t>() * stepsPerSecond.get());
	data["projectileHitChanceFallsOffWithRangeExponent"].get_to(projectileHitChanceFallsOffWithRangeExponent);
	data["projectileHitPercentPerPointAttackTypeCombatScore"].get_to(projectileHitPercentPerPointAttackTypeCombatScore);
	data["projectileHitPercentPerPointDextarity"].get_to(projectileHitPercentPerPointDextarity);
	data["projectileHitPercentPerPointQuality"].get_to(projectileHitPercentPerPointQuality);
	data["projectileHitPercentPerPointTargetCombatScore"].get_to(projectileHitPercentPerPointTargetCombatScore);
	data["projectileHitPercentPerPointWear"].get_to(projectileHitPercentPerPointWear);
	data["projectileHitPercentPerSkillPoint"].get_to(projectileHitPercentPerSkillPoint);
	data["projectileHitPercentPerUnitVolume"].get_to(projectileHitPercentPerUnitVolume);
	data["projectileMedianTargetVolume"].get_to(projectileMedianTargetVolume);
	data["rainMaximumOffset"].get_to(rainMaximumOffset);
	data["rainMaximumSpacing"].get_to(rainMaximumSpacing);
	data["rainMaximumSpacing"].get_to(rainMaximumSpacing);
	rainWriteStepFreqency = Step::create(data["rainWriteStepFreqencySeconds"].get<float>() * stepsPerSecond.get());
	data["ratioOfHitAreaToBodyPartVolumeForSever"].get_to(ratioOfHitAreaToBodyPartVolumeForSever);
	data["ratioOfTotalBodyVolumeWhichIsBlood"].get_to(ratioOfTotalBodyVolumeWhichIsBlood);
	ratioWoundsCloseDelayToBleedVolume = data["ratioWoundsCloseDelayToBleedVolumeSeconds"].get<float>() * stepsPerSecond.get();
	restIntervalSteps = Step::create(data["restIntervalSeconds"].get<uint32_t>() * stepsPerSecond.get());
	data["rollingMassModifier"].get_to(rollingMassModifier);
	data["scaleOfHumanBody"].get_to(scaleOfHumanBody);
	data["skinPierceForceCost"].get_to(skinPierceForceCost);
	data["sleepObjectivePriority"].get_to(sleepObjectivePriority);
	data["sowSeedsPriority"].get_to(sowSeedsPriority);
	sowSeedsStepsDuration = Step::create(data["sowSeedsStepsDurationSeconds"].get<float>() * stepsPerSecond.get());
	data["staminaPointsPerRestPeriod"].get_to(staminaPointsPerRestPeriod);
	data["stationPriority"].get_to(stationPriority);
	stepsFrequencyToLookForHaulSubprojects = Step::create(data["secondsFrequencyToLookForHaulSubprojects"].get<float>() * stepsPerSecond.get());
	stepsTillDiePlantPriorityOveride = Step::create(data["hoursTillDiePlantPriorityOveride"].get<uint32_t>() * stepsPerHour.get());
	stepsToDelayBeforeTryingAgainToCompleteAnObjective = Step::create(data["secondsToDelayBeforeTryingAgainToCompleteAnObjective"].get<float>() * stepsPerSecond.get());
	stepsToDelayBeforeTryingAgainToFollowLeader = Step::create(data["secondsToDelayBeforeTryingAgainToFollowLeader"].get<float>() * stepsPerSecond.get());
	stepsToDelayBeforeTryingAgainToReserveItemsAndActorsForAProject = Step::create(data["minutesToDelayBeforeTryingAgaintoReserveItemsAndActorsForAProject"].get<uint32_t>() * stepsPerMinute.get());
	stepsToDisableStockPile = Step::create(data["minutesToDisableStockPile"].get<float>() * stepsPerMinute.get());
	stepsToDrink = Step::create(data["secondsToDrink"].get<float>() * stepsPerSecond.get());
	stepsToEat = Step::create(data["secondsToEat"].get<float>() * stepsPerSecond.get());
	data["stockPilePriority"].get_to(stockPilePriority);
	data["targetedHaulPriority"].get_to(targetedHaulPriority);
	data["threadedTaskBatchSize"].get_to(threadedTaskBatchSize);
	data["unarmedCombatScoreBase"].get_to(unarmedCombatScoreBase);
	data["unarmedCombatSkillModifier"].get_to(unarmedCombatSkillModifier);
	data["undergroundAmbiantTemperature"].get_to(undergroundAmbiantTemperature);
	data["unitsBodyMassPerUnitFluidConsumed"].get_to(unitsBodyMassPerUnitFluidConsumed);
	data["unitsBodyMassPerUnitFoodConsumed"].get_to(unitsBodyMassPerUnitFoodConsumed);
	data["unitsOfAttackForcePerUnitOfStrength"].get_to(unitsOfAttackForcePerUnitOfStrength);
	data["unitsOfCarryMassPerUnitOfStrength"].get_to(unitsOfCarryMassPerUnitOfStrength);
	data["unitsOfMoveSpeedPerUnitOfAgility"].get_to(unitsOfMoveSpeedPerUnitOfAgility);
	data["unitsOfWoundAreaPerUnitItemScaleFactor"].get_to(unitsOfWoundAreaPerUnitItemScaleFactor);
	data["unitsOfVolumePerUnitOfCollisionVolume"].get_to(unitsOfVolumePerUnitOfCollisionVolume);
	data["visionRequestsReservationSize"].get_to(visionRequestsReservationSize);
	data["visionThreadingBatchSize"].get_to(visionThreadingBatchSize);
	data["wanderMaximumNumberOfBlocks"].get_to(wanderMaximumNumberOfBlocks);
	data["wanderMinimumNumberOfBlocks"].get_to(wanderMinimimNumberOfBlocks);
	woodCuttingMaxSteps = Step::create(data["woodCuttingMaxMinutes"].get<float>() * stepsPerMinute.get());
	data["woodCuttingObjectivePriority"].get_to(woodCuttingObjectivePriority);
	data["woodCuttingSkillModifier"].get_to(woodCuttingSkillModifier);
	data["woodCuttingStrengthModifier"].get_to(woodCuttingStrengthModifier);
	yokeDelaySteps = Step::create(data["yokeDelaySeconds"].get<float>() * stepsPerSecond.get());
}
